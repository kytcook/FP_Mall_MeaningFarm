<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.member.xml">
	<!-- 
	
		<insert | delete | update | select 속성="값" 속성="값 ~~>
			- id 속성 : DAO에서 설정한 값 ▶ session.insert("memberInsert", dto);
			- parameterType 속성 : 매개 변수 타입(클래스타입, 기본데이터타입) : 생략 가능
			- 입력 값 표기 : dto.getIrum() → #{dto 內 속성명} ▶ #{irum}
			- SQL 문장의 마지막에 세미콜론(;)은 입력하지 않는다. 
			- resultType 속성 : select 쿼리를 수행했을 때 결과 타입
		</insert | delete | update | select>
	 -->
	 
    <!-- ########## [[ 관리자 회원 목록 AllMember]] ########## -->
<select id="AllMember" parameterType="java.util.Map" resultType="com.vo.MemberVO">
	select * from member
	ORDER BY m_registedate desc
</select>    

<select id="memberListCount" resultType="int">
	select count(*) from member
<!-- 	where m_id = #{m_id} -->
	<include refid="memberSearch"></include>
	<!-- and m_id > 0 -->
</select>


<sql id="memberSearch">
	<if test="searchType != null">
		<if test="searchType == 't'.toString()">AND m_id LIKE '%' || #{keyword} || '%'</if>
		<if test="searchType == 'w'.toString()">AND m_name LIKE '%' || #{keyword} || '%'</if>
		<if test="searchType == 'tc'.toString()">AND m_type LIKE '%' || #{keyword} || '%'</if>
	</if>
</sql>

    <!-- ########## [[ 관리자 회원 목록 AllMember]] ########## -->
    
    
    
    
    
    
    
    <!-- ########## [[ 회원 목록 ]] ########## -->
  <!--   <select id="memberListAll" resultType="com.vo.MemberVO"> -->
    <select id="memberList" parameterType="java.util.Map" resultType="map">
    	SELECT * FROM member
    	<where>
			<if test="m_id != null">
				AND m_id = #{m_id}
			</if>    	
    	
			<if test ='cb_search!=null and cb_search.equals("auth_id")'>
				AND auth_id LIKE '%'||#{tb_search}||'%'
			</if>
			<if test ='cb_search!=null and cb_search.equals("m_id")'>
				AND m_id LIKE '%'||#{tb_search}||'%'
			</if>
			<if test ='cb_search!=null and cb_search.equals("m_email")'>
				AND m_email LIKE '%'||#{tb_search}||'%'
			</if>
			<if test ='cb_search!=null and cb_search.equals("m_name")'>
				AND m_name LIKE '%'||#{tb_search}||'%'
			</if>
			<if test ='cb_search!=null and cb_search.equals("m_type")'>
				AND m_type LIKE '%'||#{tb_search}||'%'
			</if>
		</where>    
			ORDER BY m_registedate desc
    </select>
    
    <!-- ########## [[ 일반 회원가입 ]] ########## -->
   <insert id="register" parameterType="map">
		INSERT INTO MEMBER (m_id, auth_id, m_pw, m_name, m_phone, m_email
						  , m_zipcode, m_address, m_address2, m_registedate
						  , m_type, m_stop, m_point, m_exitstatus, m_exitdate
						  , m_status, m_birth, m_bankowner, m_bank, m_banknum) 
			VALUES (#{m_id}, #{auth_id}, #{m_pw}, #{m_name}, #{m_phone}, #{m_email}
						  , #{m_zipcode}, #{m_address}, #{m_address2}, to_char(sysdate, 'YYYY-MM-DD')
						  , #{m_type}, 'N', 0, 'N', #{m_exitdate}
						  , 'N', #{m_birth}, #{m_bankowner}, #{m_bank}, #{m_banknum}) 
	</insert>
	
    <!-- ########## [[ 판매자 회원가입 !!!!!!!!!!!!!!!!!!! 다시 할것 ㅠㅠㅠㅠㅠ ]] ########## -->
   <!--
   <insert id="sregister" parameterType="map">
		INSERT INTO seller (m_id, auth_id, m_pw, m_name, m_phone, m_email
						  , m_zipcode, m_address, m_address2, m_registedate
						  , m_type, m_stop, m_point, m_exitstatus, m_exitdate
						  , m_status, m_birth)
			VALUES (#{m_id}, #{auth_id}, #{m_pw}, #{m_name}, #{m_phone}, #{m_email}
						  , #{m_zipcode}, #{m_address}, #{m_address2}, to_char(sysdate, 'YYYY-MM-DD')
						  , #{m_type}, 'N', 0, 'N', #{m_exitdate}
						  , 'N', #{m_birth})
	</insert> 
	-->
	
   <insert id="sregister" parameterType="map">
		INSERT INTO seller (m_id, auth_id, m_pw, seller_owner, m_phone, seller_email
						  , seller_zipcode, seller_address, seller_address2, seller_date
						  , seller_regino, seller_storename, seller_bank, seller_banknum, seller_bankowner
						  , m_birth)
			VALUES (#{m_id}, #{auth_id}, #{m_pw}, #{seller_owner}, #{m_phone}, #{seller_email}
						  , #{seller_zipcode}, #{seller_address}, #{seller_address2}, to_char(sysdate, 'YYYY-MM-DD')
						  , #{seller_regino}, #{seller_storename}, #{seller_bank}, #{seller_banknum}, #{seller_bankowner}
						  , #{m_birth})
	</insert> 

    <!-- ########## [[ 로그인 ]] ########## 
	<select id="login" resultType="com.vo.MemberVO">
		SELECT m_id, m_pw
		 FROM member
		<where>
			<if test="m_id!=null">
				AND m_id = #{m_id}
			</if>
			<if test="m_pw!=nul">
				AND m_pw = #{m_pw}
			</if>
		</where>
	</select>
	-->
	<select id="login" resultType="com.vo.MemberVO">
		SELECT * FROM member
		 WHERE m_id = #{m_id} AND m_pw = #{m_pw}
	</select>
	
	
	<!-- ########## [[ id 중복 검사 ]] ########## -->
	<select id="checkIdDup" resultType="int">
		SELECT COUNT(*) FROM member
		 WHERE m_id = #{m_id}
	</select>
	
    <!-- ########## [[ 아이디 찾기 ]] ########## -->
   	<select id="findId" resultType="string" parameterType="HashMap" >
		SELECT m_id
		  FROM member 
		 WHERE m_name = #{m_name} AND m_email = #{m_email}
	</select>
	
   	<select id="dupId" resultType="int" parameterType="HashMap">
		SELECT COUNT(*)
		  FROM member 
		 WHERE m_name = #{m_name} AND m_email = #{m_email}
	</select>	
	
	 <!-- ########## [[ 비밀번호 찾기 ]] ########## -->
	<select id="findPw" resultType="int" parameterType="HashMap">
		SELECT COUNT(*) 
		  FROM member
	     WHERE m_id = #{m_id} 
	      AND m_email = #{m_email}
	</select>	 
	 
	 
	 
	<!-- ########## [[ 로그인 유효성 검사 - ajax ]] ########## -->
	<select id="getUserById" resultType="com.vo.MemberVO">
		SELECT * FROM member 
		  WHERE m_id = #{m_id}
		  AND m_pw = #{m_pw}
	</select>
	
	
	<!-- ########## [[ 회원 탈퇴 - memberDelete ]] ########## -->
	<delete id="memberDelete" parameterType="com.vo.MemberVO">
		DELETE FROM member 
		 WHERE m_id = #{m_id}
	</delete>
	
	<!-- ########## [[ 모든 회원 상세보기- memberDetail ]]  ########## -->
	
	<select id="memberDetail" parameterType="map" resultType="com.vo.MemberVO">
		select auth_id, m_id, m_name, m_email, m_birth, m_registedate, m_type
		 from member
	</select>
	
	
	
	<!-- ########## [[ updatemyinfo ]] ########## -->
	<update id="updatemyinfo">
		UPDATE member
		SET m_pw = #{m_pw}, m_phone = #{m_phone}, m_email = #{m_email}
		WHERE m_id = #{m_id}
	</update>	
	
	
	
	
	<!-- ########## [[ 11.14 세션담고싶어요... ]] ########## -->
	<select id="getUsersByID" resultType="com.vo.MemberVO">
		SELECT * FROM member WHERE m_id = #{m_id}
	</select>
	
	
	 
	<!-- ########## [[ 회원 탈퇴전 비밀번호 체크? ]] ########## 
	<delete id="passCheck">
		DELETE FROM member 
		 WHERE m_id = #{m_id}
		  AND m_pw = #{m_pw}
	</delete>
	-->
	

	
	
	
	
    
    
   	<!-- 카카오계정 있냐~ 없냐~ -->
   	<select id="countSocialUser" resultType="_int">
		SELECT COUNT(*) FROM member
		 WHERE AUTH_ID = 'User'  
		   AND M_ID = #{socialId}
	</select>
 	<insert id="insertSocialUser" parameterType="HashMap">
		INSERT INTO member (m_id, auth_id, m_name, m_phone, m_email
						  , m_zipcode, m_address, m_address2, m_registedate
						  , m_type, m_stop, m_point, m_exitstatus, m_exitdate
						  , m_status, m_birth, m_bankowner, m_bank, m_banknum) 
		VALUES (#{socialId}, #{auth_id}, #{m_name}, #{m_phone}, #{m_email}
			  , #{m_zipcode}, #{m_address}, #{m_address2}, to_char(sysdate, 'YYYY-MM-DD')
			  , #{m_type}, 'N', 0, 'N', #{m_exitdate}
			  , 'N', #{m_birth}, #{m_bankowner}, #{m_bank}, #{m_banknum})
	</insert> 
    
    
    <!-- ########## [[ 회원 정보 ]] ########## -->
   	<update id="memberupdate" parameterType="map">
		UPDATE member
		   SET m_phone = #{m_phone}
		   	,m_email = #{m_email}
		   	,m_zipcode = #{m_zipcode}
		   	,m_address = #{m_address}
		   	,m_address2 = #{m_address2}
		   	,m_bankowner = #{m_bankowner}
		   	,m_bank = #{m_bank}
		   	,m_banknum = #{m_banknum}
		 WHERE m_id = #{m_id}
	</update>
	
	
	 
 	<select id="selectOneById" resultType="com.vo.MemberVO">
		SELECT * FROM member
		 WHERE m_id = #{m_id}
	</select>
	
	<!--  내정보!!!!!!!!!!! -->
 	<select id="myinfo" parameterType="map" resultType="map">
		SELECT * FROM member
		 WHERE m_id = #{m_id}
	</select>
	
<!--	<select id="mlist" parameterType="String" resultType="com.vo.MemberVO">
		SELECT m_id, auth_id, m_pw, m_name, m_phone, m_email
			  , m_zipcode, m_address, m_address2, m_registedate
			  , m_type, m_point, m_exitstatus
			  , m_status, m_birth, m_bankowner, m_bank, m_banknum
		 FROM member
		
	</select> -->
    
</mapper>

<!--   전화번호가 없네
  seller_regino       
  seller_storename    
  seller_owner        
  seller_regiapproval ㅇㅇ
  seller_date         ㅇㅇ
  seller_zipcode      
  seller_address      
  seller_address2     
  seller_email        
  seller_bank         
  seller_banknum      
  seller_bankowner    
  m_id 
-->               